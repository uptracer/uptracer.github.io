{"meta":{"title":"Fighting_Peter","subtitle":null,"description":"月亮是否只在你看着他的时候才存在","author":"uptracer","url":""},"pages":[{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-05-03T08:42:39.437Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2020-05-03T05:47:59.000Z","updated":"2020-05-03T06:26:51.003Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-05-03T05:20:57.009Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-05-03T03:18:37.293Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-05-03T06:16:14.211Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-05-03T06:29:06.603Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-05-03T08:40:03.061Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[Fighting_Peter] 与&nbsp; uptracer&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"tags","date":"2020-05-03T06:14:16.000Z","updated":"2020-05-03T06:36:53.066Z","comments":true,"path":"tags/图集/index.html","permalink":"/tags/图集/index.html","excerpt":"","text":"","keywords":"pictures"}],"posts":[{"title":"树状数组","slug":"树状数组","date":"2020-05-06T07:00:26.000Z","updated":"2020-05-06T07:20:46.149Z","comments":false,"path":"2020/05/06/树状数组/","link":"","permalink":"/2020/05/06/树状数组/","excerpt":"","text":"树状数组聊聊前缀和比如数组 int a[7]={1,2,3,4,5,6,7} 如果需询问数组从第l个数到第r个数的和暴力做法时间复杂度为$O(n)$ 不过我们可以预处理一个前缀和数组 int b[7]={1,3,6,10,15,21,28} 比如要询问[l,r]区间的和我们可以这样做b[r]-b[l-1]这也时间复杂度为$O(1)$ 但是问题来了，如果我们要既要修改数组中元素的值，有要进行上述区间查询操作呢？ 我们发现每次我们修改原数组中元素的值时间复杂度为$O(1)$但是如果修改前缀和数组中元素的值时间复杂度将会退化到$O(n)$ 总结一下： 数组 修改元素的值时间复杂度 区间求和时间复杂度 原数组 O(1) O(n) 前缀和数组 O(n) O(1) 我们可以发现如果需要单点更新和区间查询两种操作时间复杂度都是$O(n)$ 什么是树状数组?树状数组是一种便于进行单点更新和区间查询的数据结构 树状数组相关操作 二进制中最后一个1——$lowbit$ int lowbit(int x) { return x&amp;-x; } 单点更新 我们对数组位置为x的元素加上c //树状数组为tree，数组元素个数为n，数组下标从0开始 void add(int x,int c) { for(;x&lt;=n;x+=lowbit(x)) tree[x]+=c; } 区间求和 //求出[1,x]数组中的总和即前缀和 int sum(int x) { int res=0; for(;x;x-=lowbit(x)) res+=tree[x]; return res; } 局限性我们很容易发现上述树状数组只适用于单点更新和区间查询，但是如果是区间修改和单点查询好像力不从心 差分在树状数组中的应用告诉你个好消息如果有差分的介入，那么树状数组可以进行区间更新和单点查询当然也可以进行更厉害的区间更新和区间查询。 区间更新、单点查询我们把$tree[]$数组构造成一个差分数组还是看题吧 题目 给定长度为N的数列A，然后输入M行操作指令。 第一类指令形如“C l r d”，表示把数列中第l~r个数都加d。 第二类指令形如“Q X”，表示询问数列中第x个数的值。 对于每个询问，输出一个整数表示答案。 输入格式 第一行包含两个整数N和M。 第二行包含N个整数A[i]。 接下来M行表示M条指令，每条指令的格式如题目描述所示。 输出格式 对于每个询问，输出一个整数表示答案。 每个答案占一行。 #include&lt;iostream&gt; #include&lt;algorithm&gt; #include&lt;cstring&gt; using namespace std; typedef long long ll; const int N=100010; ll tree[N]; int n,m; int lowbit(int x) { return x&amp;-x; } void add(int x,int c) { for(;x&lt;=n;x+=lowbit(x)) tree[x]+=c; } ll sum(int x) { int res=0; for(;x;x-=lowbit(x)) res+=tree[x]; return res; } int main() { cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;i++) { int a; cin&gt;&gt;a; add(i,a); add(i+1,-a); } while(m--) { char t; cin&gt;&gt;t; if(t==&#39;Q&#39;) { int x; cin&gt;&gt;x; cout&lt;&lt;sum(x)&lt;&lt;endl; } else { int a,b,c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c; add(a,c); add(b+1,-c); } } return 0; } 我们可以发现对于上述代码即在建树的过程中建成差分树的形式即可 区间更新、区间查询原数组a[]，对于区间更新我们可以维护一个差分数组b[] 如果我们维护数组a的前缀和我们可以发现有下面等式： \\sum_{i=1}^x a_i=\\sum_{i=1}^x\\sum_{j=1}^i b_i=\\sum_{i=1}^x(x-i+1)b_i变换一下： \\sum_{i=1}^x a_i=(x+1)\\sum_{i=1}^x b_i-\\sum_{i=1}^x b_i×i 于是我们可以维护两个差分树状数组$tree1[]$维护$ bi $、$tree2[]$维护$i*bi$ 给定一个长度为N的数列A，以及M条指令，每条指令可能是以下两种之一： 1、“C l r d”，表示把 A[l],A[l+1],…,A[r] 都加上 d。 2、“Q l r”，表示询问 数列中第 l~r 个数的和。 对于每个询问，输出一个整数表示答案。 输入格式 第一行两个整数N,M。 第二行N个整数A[i]。 接下来M行表示M条指令，每条指令的格式如题目描述所示。 输出格式 对于每个询问，输出一个整数表示答案。 每个答案占一行。 #include&lt;iostream&gt; #include&lt;algorithm&gt; #include&lt;cstdio&gt; #include&lt;cstring&gt; using namespace std; typedef long long ll; const int N=100010; int n,m; ll tree1[N],tree2[N]; //维护b[i] 维护i*b[i] int lowbit(int x) { return x&amp;-x; } void add(ll tree[],int x,ll c) { for(;x&lt;=n;x+=lowbit(x)) tree[x]+=c; } ll sum(ll tree[],int x) { ll res=0; for(;x;x-=lowbit(x)) res+=tree[x]; return res; } ll prefix_sum(int x) { return (x+1)*sum(tree1,x)-sum(tree2,x); } int main() { scanf(&quot;%d%d&quot;,&amp;n,&amp;m); for(int i=1;i&lt;=n;i++) { int a; scanf(&quot;%d&quot;,&amp;a); add(tree1,i,a); add(tree1,i+1,-a); add(tree2,i,1ll*i*a); add(tree2,i+1,-1ll*(i+1)*a); } while(m--) { char t; int l,r; cin&gt;&gt;t&gt;&gt;l&gt;&gt;r; if(t==&#39;Q&#39;) { scanf(&quot;%d%d&quot;,&amp;l,&amp;r); cout&lt;&lt;prefix_sum(r)-prefix_sum(l-1)&lt;&lt;endl; } else { int d; scanf(&quot;%d&quot;,&amp;d); add(tree1,l,d),add(tree1,r+1,-d); add(tree2,l,l*d),add(tree2, r+1,-1ll*(r+1)*d); } } return 0; } 总结 2020/5/6学习树状数组，树状数组可以优化很多问题未来等遇到了在加进去 以上题目来自于$lyd$老师的《算法进阶指南》参考$lcf$大佬博客","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"codeforces","slug":"codeforces","date":"2020-05-04T03:37:00.000Z","updated":"2020-05-06T07:18:39.661Z","comments":true,"path":"2020/05/04/codeforces/","link":"","permalink":"/2020/05/04/codeforces/","excerpt":"","text":"\\begin{cases} 3x + 5y + z \\\\ 7x - 2y + 4z \\\\ -6x + 3y + 2z \\end{cases}z f(x) \\,\\! = \\sum_{n=0}^\\infty a_n x^n = a_0+a_1x+a_2x^2+\\cdots","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"codeforces 608 problemC","slug":"MATLAB灰色预测","date":"2020-05-04T02:11:00.000Z","updated":"2020-05-06T07:22:15.678Z","comments":true,"path":"2020/05/04/MATLAB灰色预测/","link":"","permalink":"/2020/05/04/MATLAB灰色预测/","excerpt":"","text":"descriptionThere are $n$ beacons located at distinct positions on a number line. The i-th beacon has position a i and power level b i. When the i-th beacon is activated, it destroys all beacons to its left (direction of decreasing coordinates) within distance b i inclusive. The beacon itself is not destroyed however. Saitama will activate the beacons one at a time from right to left. If a beacon is destroyed, it cannot be activated. Saitama wants Genos to add a beacon strictly to the right of all the existing beacons, with any position and any power level, such that the least possible number of beacons are destroyed. Note that Genos’s placement of the beacon means it will be the first beacon activated. Help Genos by finding the minimum number of beacons that could be destroyed. inputThe first line of input contains a single integer n (1 ≤ n ≤ 100000) — the initial number of beacons.The i-th of next n lines contains two integers a i and b i (0 ≤ a i ≤ 1 000 000, 1 ≤ b i ≤ 1 000 000) — the position and power level of the i-th beacon respectively. No two beacons will have the same position, so a i ≠ aj if i ≠ j. outputPrint a single integer — the minimum number of beacons that could be destroyed if exactly one beacon is added. 解释状态表示：①集合：f[i]表示从第i个位置依次从左向右激活激光塔②属性：剩余灯塔数量的最大值状态计算： \\begin{cases} 3x + 5y + z \\\\ 7x - 2y + 4z \\\\ -6x + 3y + 2z \\end{cases} 代码#include&lt;iostream&gt; #include&lt;algorithm&gt; using namespace std; const int N=1000010; int mp[N],power[N]; int n; int f[N]; int main() { cin&gt;&gt;n; int len=0; for(int i=1;i&lt;=n;i++) { int a,b; cin&gt;&gt;a&gt;&gt;b; mp[a]=1; power[a]=b; len=max(len,a); } int res=0; if(mp[0]) f[0]=1; for(int i=0;i&lt;=len;i++) { if(mp[i]) { if(power[i]&gt;=i) f[i]=1; else f[i]=f[i-power[i]-1]+1; } else f[i]=f[i-1]; res=max(res,f[i]); } cout&lt;&lt;n-res&lt;&lt;endl; return 0; }","categories":[],"tags":[],"keywords":[]}]}